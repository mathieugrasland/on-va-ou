name: üöÄ Deploy to Firebase

on:
  push:
    branches: [main, dev]
  workflow_dispatch: # Permet d√©clenchement manuel
    inputs:
      deploy_all:
        description: 'Force deploy all components'
        required: false
        default: false
        type: boolean
      rollback_to_main:
        description: 'Deploy main branch to production (rollback)'
        required: false
        default: false
        type: boolean

env:
  NODE_VERSION: '20'
  PYTHON_VERSION: '3.11'

jobs:
  # D√©termination de l'environnement et du mode de d√©ploiement
  setup:
    name: üéØ Setup Deployment
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.env.outputs.environment }}
      is_rollback: ${{ steps.env.outputs.is_rollback }}
      should_deploy_all: ${{ steps.env.outputs.should_deploy_all }}
      branch_to_deploy: ${{ steps.env.outputs.branch_to_deploy }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Determine environment and deployment mode
        id: env
        run: |
          # D√©terminer la branche √† d√©ployer
          if [ "${{ github.event.inputs.rollback_to_main }}" == "true" ]; then
            echo "is_rollback=true" >> $GITHUB_OUTPUT
            echo "branch_to_deploy=main" >> $GITHUB_OUTPUT
            echo "environment=production" >> $GITHUB_OUTPUT
            echo "üîÑ ROLLBACK MODE: Deploying main branch to production"
            git checkout main
          elif [ "${{ github.ref_name }}" == "main" ]; then
            echo "is_rollback=false" >> $GITHUB_OUTPUT
            echo "branch_to_deploy=main" >> $GITHUB_OUTPUT
            echo "environment=production" >> $GITHUB_OUTPUT
            echo "üöÄ PRODUCTION MODE: Deploying main branch"
          elif [ "${{ github.ref_name }}" == "dev" ]; then
            echo "is_rollback=false" >> $GITHUB_OUTPUT
            echo "branch_to_deploy=dev" >> $GITHUB_OUTPUT
            echo "environment=staging" >> $GITHUB_OUTPUT
            echo "üß™ STAGING MODE: Deploying dev branch"
          fi
          
          # D√©terminer si on doit tout d√©ployer
          if [ "${{ github.event.inputs.deploy_all }}" == "true" ] || \
             [ "${{ github.event.inputs.rollback_to_main }}" == "true" ] || \
             [ "${{ github.event_name }}" == "workflow_dispatch" ] || \
             [[ "${{ github.event.head_commit.message }}" == *"[deploy-all]"* ]]; then
            echo "should_deploy_all=true" >> $GITHUB_OUTPUT
            echo "üì¶ FULL DEPLOYMENT: All components will be deployed"
          else
            echo "should_deploy_all=false" >> $GITHUB_OUTPUT
            echo "üéØ SELECTIVE DEPLOYMENT: Only changed components will be deployed"
          fi

  # Analyse des changements pour optimiser les d√©ploiements
  changes:
    name: üîç Detect Changes
    runs-on: ubuntu-latest
    needs: setup
    if: needs.setup.outputs.should_deploy_all == 'false'
    outputs:
      hosting: ${{ steps.changes.outputs.hosting }}
      functions: ${{ steps.changes.outputs.functions }}
      firestore: ${{ steps.changes.outputs.firestore }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Detect changes
        uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            hosting:
              - 'public/**'
              - 'firebase.json'
            functions:
              - 'functions/**'
            firestore:
              - 'firestore.rules'
              - 'firestore.indexes.json'

  # Validation et tests
  validate:
    name: ‚úÖ Validate Code
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.setup.outputs.branch_to_deploy }}

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Validate Python syntax
        run: |
          python -m py_compile functions/main.py
          echo "‚úÖ Python syntax valid"

      - name: Validate JSON files
        run: |
          python -m json.tool firebase.json > /dev/null
          python -m json.tool firestore.indexes.json > /dev/null
          echo "‚úÖ JSON files valid"

      - name: Check Firebase config
        run: |
          if grep -q "your-api-key" public/firebase-config.js; then
            echo "‚ùå Firebase config contains placeholder values"
            exit 1
          fi
          echo "‚úÖ Firebase config looks good"

      - name: Display deployment info
        run: |
          echo "üéØ Deployment Information:"
          echo "  Branch: ${{ needs.setup.outputs.branch_to_deploy }}"
          echo "  Environment: ${{ needs.setup.outputs.environment }}"
          echo "  Deploy All: ${{ needs.setup.outputs.should_deploy_all }}"
          echo "  Is Rollback: ${{ needs.setup.outputs.is_rollback }}"

  # D√©ploiement Hosting (rapide)
  deploy-hosting:
    name: üåê Deploy Hosting
    runs-on: ubuntu-latest
    needs: [setup, changes, validate]
    if: always() && needs.validate.result == 'success' && (needs.setup.outputs.should_deploy_all == 'true' || needs.changes.outputs.hosting == 'true')
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.setup.outputs.branch_to_deploy }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Install Firebase CLI
        run: npm install -g firebase-tools@latest

      - name: Deploy Hosting
        run: |
          echo "üöÄ Deploying from branch: ${{ needs.setup.outputs.branch_to_deploy }}"
          echo "üéØ Environment: ${{ needs.setup.outputs.environment }}"
          firebase deploy --only hosting --project on-va-ou-470217 --non-interactive
          echo "‚úÖ Hosting deployed successfully"

  # D√©ploiement Functions (avec g√©olocalisation s√©curis√©e)
  deploy-functions:
    name: ‚ö° Deploy Functions
    runs-on: ubuntu-latest
    needs: [setup, changes, validate]
    if: always() && needs.validate.result == 'success' && (needs.setup.outputs.should_deploy_all == 'true' || needs.changes.outputs.functions == 'true')
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.setup.outputs.branch_to_deploy }}

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Setup Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Install Python dependencies
        working-directory: functions
        run: |
          pip install --upgrade pip
          pip install -r requirements.txt
          echo "‚úÖ Python dependencies installed"

      - name: Enable required APIs
        run: |
          # Activer les APIs n√©cessaires pour Cloud Functions
          gcloud services enable cloudfunctions.googleapis.com --project on-va-ou-470217
          gcloud services enable cloudbuild.googleapis.com --project on-va-ou-470217
          gcloud services enable run.googleapis.com --project on-va-ou-470217
          
          # Activer les APIs Google Maps n√©cessaires pour les bars
          gcloud services enable places-backend.googleapis.com --project on-va-ou-470217
          gcloud services enable geocoding-backend.googleapis.com --project on-va-ou-470217
          gcloud services enable maps-backend.googleapis.com --project on-va-ou-470217
          gcloud services enable distance-matrix-backend.googleapis.com --project on-va-ou-470217
          
          echo "‚úÖ Required APIs enabled (Cloud Functions + Google Maps)"

      - name: Deploy Cloud Functions with secure geocoding
        env:
          GOOGLE_MAPS_API_KEY: ${{ secrets.GOOGLE_MAPS_API_KEY }}
        working-directory: functions
        run: |
          echo "üöÄ Deploying from branch: ${{ needs.setup.outputs.branch_to_deploy }}"
          echo "üéØ Environment: ${{ needs.setup.outputs.environment }}"
          
          # D√©ployer la fonction de g√©ocodage s√©curis√©e (1st gen pour simplicit√©)
          gcloud functions deploy geocode_address \
            --runtime python311 \
            --trigger-http \
            --allow-unauthenticated \
            --no-gen2 \
            --source . \
            --entry-point geocode_address \
            --set-env-vars GOOGLE_MAPS_API_KEY="${GOOGLE_MAPS_API_KEY}" \
            --project on-va-ou-470217
          
          # D√©ployer la fonction de recherche de bars optimaux
          gcloud functions deploy find_optimal_bars \
            --runtime python311 \
            --trigger-http \
            --allow-unauthenticated \
            --no-gen2 \
            --source . \
            --entry-point find_optimal_bars \
            --set-env-vars GOOGLE_MAPS_API_KEY="${GOOGLE_MAPS_API_KEY}" \
            --project on-va-ou-470217
          
          echo "‚úÖ Cloud Functions (geocode_address + find_optimal_bars) deployed successfully"

  # D√©ploiement Firestore Rules
  deploy-firestore:
    name: üîê Deploy Firestore Rules
    runs-on: ubuntu-latest
    needs: [setup, changes, validate]
    if: always() && needs.validate.result == 'success' && (needs.setup.outputs.should_deploy_all == 'true' || needs.changes.outputs.firestore == 'true')
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.setup.outputs.branch_to_deploy }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Install Firebase CLI
        run: npm install -g firebase-tools@latest

      - name: Deploy Firestore Rules Only (skip indexes for now)
        run: |
          echo "üöÄ Deploying from branch: ${{ needs.setup.outputs.branch_to_deploy }}"
          echo "üéØ Environment: ${{ needs.setup.outputs.environment }}"
          # D√©ployer seulement les r√®gles, pas les index pour √©viter l'erreur 403
          firebase deploy --only firestore:rules --project on-va-ou-470217 --non-interactive
          echo "‚úÖ Firestore rules deployed successfully (indexes skipped)"

  # Notification de succ√®s
  notify-success:
    name: üéâ Deployment Complete
    runs-on: ubuntu-latest
    needs: [setup, deploy-hosting, deploy-functions, deploy-firestore]
    if: always() && (needs.deploy-hosting.result == 'success' || needs.deploy-functions.result == 'success' || needs.deploy-firestore.result == 'success')
    steps:
      - name: Success notification
        run: |
          if [ "${{ needs.setup.outputs.is_rollback }}" == "true" ]; then
            echo "üîÑ ROLLBACK COMPLETED!"
            echo "‚úÖ Successfully rolled back to main branch"
            echo "ÔøΩ Environment: ${{ needs.setup.outputs.environment }}"
          else
            echo "ÔøΩüéâ Deployment completed successfully!"
            echo "üöÄ Branch: ${{ needs.setup.outputs.branch_to_deploy }}"
            echo "ÔøΩ Environment: ${{ needs.setup.outputs.environment }}"
          fi
          echo "ÔøΩüåê Your app is live at: https://on-va-ou-470217.web.app"
          echo "üìä Firebase Console: https://console.firebase.google.com/project/on-va-ou-470217"

  # Notification d'√©chec avec instructions de rollback
  notify-failure:
    name: ‚ùå Deployment Failed
    runs-on: ubuntu-latest
    needs: [setup, deploy-hosting, deploy-functions, deploy-firestore]
    if: always() && (needs.deploy-hosting.result == 'failure' || needs.deploy-functions.result == 'failure' || needs.deploy-firestore.result == 'failure')
    steps:
      - name: Failure notification with rollback instructions
        run: |
          echo "‚ùå Deployment failed!"
          echo "üéØ Failed branch: ${{ needs.setup.outputs.branch_to_deploy }}"
          echo "üéØ Environment: ${{ needs.setup.outputs.environment }}"
          echo ""
          echo "üîÑ To rollback to main branch, you can:"
          echo "1. Go to Actions tab in GitHub"
          echo "2. Click 'Run workflow' on this workflow"
          echo "3. Check 'Deploy main branch to production (rollback)'"
          echo "4. Click 'Run workflow'"
          echo ""
          echo "Or create a commit with '[deploy-all]' in the message on main branch"