name: üöÄ Deploy to Firebase

on:
  push:
    branches: [main]
  workflow_dispatch: # Permet d√©clenchement manuel

env:
  NODE_VERSION: '20'
  PYTHON_VERSION: '3.9'

jobs:
  # Analyse des changements pour optimiser les d√©ploiements
  changes:
    name: üîç Detect Changes
    runs-on: ubuntu-latest
    outputs:
      hosting: ${{ steps.changes.outputs.hosting }}
      functions: ${{ steps.changes.outputs.functions }}
      firestore: ${{ steps.changes.outputs.firestore }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Detect changes
        uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            hosting:
              - 'public/**'
              - 'firebase.json'
            functions:
              - 'functions/**'
            firestore:
              - 'firestore.rules'
              - 'firestore.indexes.json'

  # Validation et tests
  validate:
    name: ‚úÖ Validate Code
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Validate Python syntax
        run: |
          python -m py_compile functions/main.py
          echo "‚úÖ Python syntax valid"

      - name: Validate JSON files
        run: |
          python -m json.tool firebase.json > /dev/null
          python -m json.tool firestore.indexes.json > /dev/null
          echo "‚úÖ JSON files valid"

      - name: Check Firebase config
        run: |
          if grep -q "your-api-key" public/firebase-config.js; then
            echo "‚ùå Firebase config contains placeholder values"
            exit 1
          fi
          echo "‚úÖ Firebase config looks good"

  # D√©ploiement Hosting (rapide)
  deploy-hosting:
    name: üåê Deploy Hosting
    runs-on: ubuntu-latest
    needs: [changes, validate]
    # D√©ploie si: changements hosting OU d√©clenchement manuel OU commit contient [deploy-all]
    if: needs.changes.outputs.hosting == 'true' || github.event_name == 'workflow_dispatch' || contains(github.event.head_commit.message, '[deploy-all]')
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          # Suppression du cache NPM car pas de package.json dans le projet

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Install Firebase CLI
        run: npm install -g firebase-tools@latest

      - name: Deploy Hosting
        run: |
          firebase deploy --only hosting --project on-va-ou-470217 --non-interactive
          echo "‚úÖ Hosting deployed successfully"

  # D√©ploiement Functions (avec g√©olocalisation s√©curis√©e)
  deploy-functions:
    name: ‚ö° Deploy Functions
    runs-on: ubuntu-latest
    needs: [changes, validate]
    # D√©ploie si: changements functions OU d√©clenchement manuel OU commit contient [deploy-all]
    if: needs.changes.outputs.functions == 'true' || github.event_name == 'workflow_dispatch' || contains(github.event.head_commit.message, '[deploy-all]')
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Setup Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Install Python dependencies
        working-directory: functions
        run: |
          pip install --upgrade pip
          pip install -r requirements.txt
          echo "‚úÖ Python dependencies installed"

      - name: Deploy Cloud Functions with secure geocoding
        env:
          GOOGLE_MAPS_API_KEY: ${{ secrets.GOOGLE_MAPS_API_KEY }}
        working-directory: functions
        run: |
          # D√©ployer la fonction de g√©ocodage s√©curis√©e
          gcloud functions deploy geocode_address \
            --runtime python39 \
            --trigger-http \
            --allow-unauthenticated \
            --source . \
            --entry-point geocode_address \
            --set-env-vars GOOGLE_MAPS_API_KEY="${GOOGLE_MAPS_API_KEY}" \
            --project on-va-ou-470217
          
          # D√©ployer les autres fonctions
          gcloud functions deploy get_user_profile \
            --runtime python39 \
            --trigger-http \
            --allow-unauthenticated \
            --source . \
            --entry-point get_user_profile \
            --project on-va-ou-470217

          gcloud functions deploy update_user_profile \
            --runtime python39 \
            --trigger-http \
            --allow-unauthenticated \
            --source . \
            --entry-point update_user_profile \
            --project on-va-ou-470217

          gcloud functions deploy send_friend_request \
            --runtime python39 \
            --trigger-http \
            --allow-unauthenticated \
            --source . \
            --entry-point send_friend_request \
            --project on-va-ou-470217
          
          echo "‚úÖ All Cloud Functions deployed successfully"

  # D√©ploiement Firestore Rules
  deploy-firestore:
    name: üîê Deploy Firestore Rules
    runs-on: ubuntu-latest
    needs: [changes, validate]
    # D√©ploie si: changements firestore OU d√©clenchement manuel OU commit contient [deploy-all]
    if: needs.changes.outputs.firestore == 'true' || github.event_name == 'workflow_dispatch' || contains(github.event.head_commit.message, '[deploy-all]')
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Install Firebase CLI
        run: npm install -g firebase-tools@latest

      - name: Deploy Firestore Rules Only (skip indexes for now)
        run: |
          # D√©ployer seulement les r√®gles, pas les index pour √©viter l'erreur 403
          firebase deploy --only firestore:rules --project on-va-ou-470217 --non-interactive
          echo "‚úÖ Firestore rules deployed successfully (indexes skipped)"

  # Notification de succ√®s
  notify-success:
    name: üéâ Deployment Complete
    runs-on: ubuntu-latest
    needs: [deploy-hosting, deploy-functions, deploy-firestore]
    if: always() && (needs.deploy-hosting.result == 'success' || needs.deploy-functions.result == 'success' || needs.deploy-firestore.result == 'success')
    steps:
      - name: Success notification
        run: |
          echo "üéâ Deployment completed successfully!"
          echo "üåê Your app is live at: https://on-va-ou-470217.web.app"
          echo "üìä Firebase Console: https://console.firebase.google.com/project/on-va-ou-470217"